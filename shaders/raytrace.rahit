#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_image_load_formatted : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "random.glsl"
#include "raycommon.glsl"
#include "host_device.h"

hitAttributeEXT vec2 bary;

layout(location = 0) rayPayloadInEXT hitPayload prd;

layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalData uni; };
layout(set = 1, binding = eObjDescs, scalar) buffer ObjDescBuffer { ObjDesc i[]; } objDesc;
layout(set = 1, binding = eTextures) uniform sampler2D[] textureSampler;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

layout(buffer_reference, scalar) buffer Vertices { Vertex v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer Indices { ivec3 i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials { GltfMaterial m[]; }; // Array of all materials on an object
layout(buffer_reference, scalar) buffer MatIndices { int i[]; }; // Material ID for each triangle

void main()
{
    ObjDesc objResource = objDesc.i[gl_InstanceCustomIndexEXT];
    MatIndices matIndices = MatIndices(objResource.materialIndexAddress);
    Materials materials = Materials(objResource.materialAddress);

    uint matId = matIndices.i[gl_PrimitiveID];
    GltfMaterial mat = materials.m[matId];

    // (Not needed, check flags in accelstrct.cpp)
    // back face culling
    // if(mat.doubleSided == 0 && (gl_HitKindEXT == gl_HitKindBackFacingTriangleEXT))
    // {
    //   ignoreIntersectionEXT;  // Terminating (jump statement)
    // }
    //
    // early out if there is no opacity function
    // if(mat.alphaMode == ALPHA_OPAQUE) {
    //     return;
    // }

    float baseColorAlpha = mat.pbrBaseColorFactor.a;
    if(mat.pbrBaseColorTexture > -1)
    {
        // Primitive buffer addresses
        Indices  indices  = Indices(objResource.indexAddress);
        Vertices vertices = Vertices(objResource.vertexAddress);

        // Indices of this triangle primitive.
        uvec3 tri = indices.i[gl_PrimitiveID];

        // All vertex attributes of the triangle.
        Vertex attr0 = vertices.v[tri.x];
        Vertex attr1 = vertices.v[tri.y];
        Vertex attr2 = vertices.v[tri.z];

        // Get the texture coordinate
        const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);
        const vec2 uv0 = attr0.texCoord;
        const vec2 uv1 = attr1.texCoord;
        const vec2 uv2 = attr2.texCoord;
        vec2 texCoord0 = uv0 * barycentrics.x + uv1 * barycentrics.y + uv2 * barycentrics.z;

        baseColorAlpha *= texture(textureSampler[mat.pbrBaseColorTexture], texCoord0).a;
    }

    float opacity;
    if(mat.alphaMode == ALPHA_MASK) {
        opacity = baseColorAlpha > mat.alphaCutoff ? 1.0 : 0.0;
    }
    else {
        opacity = baseColorAlpha;
    }

    // Do alpha blending the stochastically way
    if(rnd(prd.seed) > opacity)
        ignoreIntersectionEXT;
}
