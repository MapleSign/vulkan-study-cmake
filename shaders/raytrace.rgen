#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "random.glsl"
#include "raycommon.glsl"
#include "host_device.h"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalData uni; };

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

void main() 
{
    // Initialize the random number
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pcRay.frame);

    const int NBSAMPLES = 10;
    vec3 hitValue = vec3(0);
    for (int smpl = 0; smpl < NBSAMPLES; smpl++) {
        float r1 = rnd(seed);
        float r2 = rnd(seed);
        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide antialiasing.
        vec2 subpixel_jitter = vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin = uni.viewInverse * vec4(0, 0, 0, 1);
        vec4 target = uni.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

        uint  rayFlags = gl_RayFlagsOpaqueEXT;
        float tMin     = 0.001;
        float tMax     = 10000.0;

        traceRayEXT(topLevelAS, // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );

        hitValue += prd.hitValue;
    }

    prd.hitValue = hitValue / NBSAMPLES;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hitValue.xyz, 1.0));
}
