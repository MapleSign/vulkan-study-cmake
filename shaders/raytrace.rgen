#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_ARB_shader_clock : enable

#include "random.glsl"
#include "raycommon.glsl"
#include "host_device.h"

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(location = 1) rayPayloadEXT bool isShadowed;

layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalData uni; };
layout(set = 1, binding = eObjDescs, scalar) buffer ObjDescBuffer { ObjDesc i[]; } objDesc;
layout(set = 1, binding = eTextures) uniform sampler2D[] textureSampler;

layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

layout(buffer_reference, scalar) buffer Vertices { Vertex v[]; }; // Positions of an object
layout(buffer_reference, scalar) buffer Indices { ivec3 i[]; }; // Triangle indices
layout(buffer_reference, scalar) buffer Materials { GltfMaterial m[]; }; // Array of all materials on an object
layout(buffer_reference, scalar) buffer MatIndices { int i[]; }; // Material ID for each triangle

#include "pathtrace.glsl"

void main() 
{
    ivec2 imageSize = ivec2(gl_LaunchSizeEXT.xy);
    ivec2 imageCoord = ivec2(gl_LaunchIDEXT.xy);
    // Initialize the random number
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    prd.seed = seed;

    const int NBSAMPLES = 5;
    vec3 hitValue = vec3(0);
    for (int smpl = 0; smpl < NBSAMPLES; smpl++) {
        hitValue += samplerPixel(imageCoord, imageSize);
    }

    hitValue = hitValue / NBSAMPLES;
    //imageStore(image, imageCoord, vec4(hitValue.xyz, 1.0));
    // Do accumulation over time


    if(pcRay.frame > 0)
    {
        float a         = 1.0f / float(pcRay.frame + 1);
        vec3  old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        if(isnan(hitValue.r)||isnan(hitValue.g)||isnan(hitValue.b))
        {
            return;
        }
        else 
        {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hitValue, a), 1.f));
        }
        
    }
    else
    {
        // First frame, replace the value in the buffer
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1.f));
    }
}
